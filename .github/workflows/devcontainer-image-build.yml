name: devcontainerイメージ自動ビルド・起動テスト

on:
  workflow_call:
    inputs:
      search_path:
        required: false
        type: string
        default: devcontainers
      prefix:
        required: false
        type: string
        default: devcontainer
      tag:
        required: false
        type: string
      safix:
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAX_RETRIES: 18
  RETRY_INTERVAL: 10

jobs:
  detect-devcontainers:
    name: devcontainerディレクトリ検出
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4

      - name: devcontainerディレクトリ検出とタグ生成
        id: set-matrix
        shell: bash
        run: |
          set -e
          SEARCH_PATH="${{ inputs.search_path }}"
          USER_PREFIX="${{ inputs.prefix }}"
          USER_TAG="${{ inputs.tag }}"
          USER_SAFIX="${{ inputs.safix }}"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"

          # safixの決定
          if [ -n "$USER_SAFIX" ]; then
            SAFIX="$USER_SAFIX"
          else
            if [[ "${GITHUB_HEAD_REF}" =~ ^release-please ]]; then
              SAFIX="pre"
            elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
              git fetch --tags
              SAFIX=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            else
              SAFIX="pre"
            fi
          fi

          # .devcontainer/devcontainer.json を全探索
          mapfile -t found < <(find "$SEARCH_PATH" -type f -path '*/.devcontainer/devcontainer.json' 2>/dev/null || true)

          if [ "${#found[@]}" -eq 0 ]; then
            echo "[WARNING] devcontainer未検出"
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "[" > matrix.json
          first=1
          for path in "${found[@]}"; do
            parent_dir=$(dirname "$(dirname "$path")")
            if [ "$parent_dir" = "." ] || [ "$parent_dir" = "/" ]; then
              default_tag="$REPO_NAME"
              dir="."
            else
              default_tag=$(basename "$parent_dir")
              dir="$parent_dir"
            fi
            # tagは呼び出し側指定があればそれを優先
            if [ -n "$USER_TAG" ]; then
              tag="$USER_TAG"
            else
              tag="$default_tag"
            fi
            prefix="$USER_PREFIX"
            safix="$SAFIX"
            full_tag="${prefix}-${tag}-${safix}"
            [ $first -eq 0 ] && echo "," >> matrix.json
            echo -n "{\"dir\":\"$dir\",\"name\":\"$tag\",\"tag\":\"$full_tag\"}" >> matrix.json
            first=0
          done
          echo "]" >> matrix.json
          matrix=$(cat matrix.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-and-push:
    name: devcontainerイメージビルド・プッシュ
    needs: detect-devcontainers
    if: needs.detect-devcontainers.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.detect-devcontainers.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    outputs:
      tags-matrix: ${{ steps.gen-tags.outputs.tags-matrix }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4

      - name: QEMUセットアップ
        uses: docker/setup-qemu-action@v3

      - name: Buildxセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Dockerログイン
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: イメージ名・タグ生成
        id: meta
        run: |
          set -e
          DIR="${{ matrix.dir }}"
          NAME="${{ matrix.name }}"
          TAG="${{ matrix.tag }}"
          REPO="ghcr.io/${{ github.repository_owner }}/${{ github.repository }}"
          echo "[INFO] イメージ名・タグ生成: $REPO:$TAG"
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "dir=$DIR" >> $GITHUB_OUTPUT

      - name: devcontainers/ciによるビルド・プッシュ
        uses: devcontainers/ci@v0.3
        with:
          subFolder: ${{ matrix.dir }}
          imageName: ${{ steps.meta.outputs.repo }}
          imageTag: ${{ steps.meta.outputs.tag }}
          platform: linux/amd64
          push: always

      - name: matrix用タグ情報生成
        id: gen-tags
        shell: bash
        run: |
          printf '[{"dir":"%s","name":"%s","tag":"%s"}]' "${{ matrix.dir }}" "${{ matrix.name }}" "${{ steps.meta.outputs.tag }}" > tags-matrix.json
          echo "tags-matrix=$(cat tags-matrix.json)" >> $GITHUB_OUTPUT

  test-devcontainer:
    name: devcontainerイメージ起動テスト
    needs: build-and-push
    if: needs.build-and-push.outputs.tags-matrix != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-and-push.outputs.tags-matrix) }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4

      - name: Dockerログイン
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: イメージがpull可能になるまでリトライ
        id: wait-for-image
        shell: bash
        run: |
          set -e
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ matrix.tag }}
          echo "[INFO] Start polling manifest for $IMAGE (amd64)"
          for i in $(seq 1 "${MAX_RETRIES}"); do
            if docker manifest inspect "$IMAGE" 2>/dev/null | grep -q "amd64"; then
              echo "found=true" >> $GITHUB_OUTPUT
              echo "image=$IMAGE" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "[WARNING] $IMAGE for amd64 not found yet. Retry $i/${MAX_RETRIES}..."
              sleep "${RETRY_INTERVAL}"
            fi
          done
          echo "found=false" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "::error ::Docker image $IMAGE (amd64) was not found after $((MAX_RETRIES*RETRY_INTERVAL)) seconds."
          exit 1

      - name: devcontainer CLI インストール
        if: steps.wait-for-image.outputs.found == 'true'
        run: npm install -g @devcontainers/cli

      - name: devcontainerイメージ起動テスト
        if: steps.wait-for-image.outputs.found == 'true'
        shell: bash
        run: |
          set -e
          IMAGE=${{ steps.wait-for-image.outputs.image }}
          echo "[INFO] devcontainerイメージ起動テスト: $IMAGE (amd64)"
          CONTAINER_ID=""
          trap 'if [ -n "$CONTAINER_ID" ]; then echo "[INFO] docker logs for $CONTAINER_ID:"; docker logs "$CONTAINER_ID" || true; fi' ERR
          # devcontainer upで起動したコンテナIDを取得
          CONTAINER_ID=$(devcontainer up --workspace-folder . --image-name "$IMAGE" --id-label test-run=$(date +%s) 2>&1 | tee /tmp/devcontainer-up.log | grep -oE 'Started container: [a-z0-9]+' | awk '{print $3}' || true)
          if grep -q "Error" /tmp/devcontainer-up.log; then
            echo "::error ::devcontainer up failed for $IMAGE (amd64)"
            if [ -n "$CONTAINER_ID" ]; then
              echo "[INFO] docker logs for $CONTAINER_ID:"
              docker logs "$CONTAINER_ID" || true
            fi
            exit 1
          fi

      - name: テスト失敗時のエラーハンドリング
        if: failure()
        run: |
          echo "::error ::devcontainerイメージ起動テストでエラーが発生しました。"

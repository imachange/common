name: devcontainerイメージ自動ビルド・起動テスト

on:
  workflow_call:
    inputs:
      imageName:
        description: "ビルドするdevcontainerイメージ名（空の場合はghcr.io/owner/repo）"
        required: false
        type: string
        default: ghcr.io/${{ github.repository }}
      imageTag:
        description: |
          イメージタグ（カンマ区切り可、プレースホルダー利用可）
          利用可能なプレースホルダー:
            {date}      ... YYYYMMDD
            {datetime}  ... YYYYMMDD-HHMMSS
            {gitTag}    ... gitのタグ名（タグpush時のみ）
            {gitSha}    ... コミットSHA
            {shortSha}  ... コミットSHA短縮（8桁）
            {branch}    ... ブランチ名
            {repo}      ... リポジトリ名
            {owner}     ... リポジトリオーナー
            {name}      ... devcontainerディレクトリ名
            {parent}    ... devcontainerディレクトリの一つ上のディレクトリ名（ルートや.devcontainer直下は空）
        required: false
        type: string
        default: ""
      configFile:
        description: "devcontainer.jsonのパス（例: .devcontainer/devcontainer.json や folderA/devcontainer.json など）"
        required: false
        type: string
        default: ""
      runCmd:
        description: "ビルド後にdevcontainer内で実行するコマンド（全アーキテクチャで動作する内容を推奨）"
        required: false
        type: string
        default: echo "DevContainer build succeeded"
      env:
        description: "devcontainer実行時に渡す環境変数（改行区切り）"
        required: false
        type: string
        default: ""
      push:
        description: "イメージをpushするタイミング（never, filter, always）"
        required: false
        type: string
        default: always
      platform:
        description: "ビルド対象プラットフォーム（カンマ区切り、例: linux/amd64,linux/arm64）"
        required: false
        type: string
        default: linux/amd64,linux/arm64
      cacheFrom:
        description: "ビルドキャッシュ用イメージ"
        required: false
        type: string
        default: ""
      noCache:
        description: "キャッシュを使わずビルドするか"
        required: false
        type: boolean
        default: false

      # === ワークフロー独自inputs ===
      check_diff:
        description: "差分チェックを行うかどうか"
        required: false
        type: boolean
        default: true
      diff_pattern:
        description: "差分チェック時のgrepパターン"
        required: false
        type: string
        default: '\.devcontainer/'
      search_path:
        description: "devcontainer探索の親ディレクトリ"
        required: false
        type: string
        default: "."
      recursive_search:
        description: "再帰的に探索するかどうか"
        required: false
        type: boolean
        default: false
      search_pattern:
        description: "devcontainer探索時のfindパターン"
        required: false
        type: string
        default: 'devcontainer.json .devcontainer/devcontainer.json'
      exclude_path:
        description: "除外したいディレクトリ（スペース区切りで複数指定可）"
        required: false
        type: string
        default: ""
      exclude_pattern:
        description: "除外したいパターン（grep互換、スペース区切りで複数指定可）"
        required: false
        type: string
        default: ""
      max_retries:
        description: "イメージpullリトライ回数"
        required: false
        type: number
        default: 18
      retry_interval:
        description: "イメージpullリトライ間隔（秒）"
        required: false
        type: number
        default: 10

    outputs:
      result:
        description: "ビルド・テストの結果（success/failure）"
        value: ${{ jobs.build-and-push.outputs.result }}
      image_url:
        description: "作成したイメージのURL（成功時のみ）"
        value: ${{ jobs.build-and-push.outputs.image_url }}
      error_message:
        description: "失敗時のエラーメッセージ"
        value: ${{ jobs.build-and-push.outputs.error_message }}

env:
  MAX_RETRIES: ${{ inputs.max_retries }}
  RETRY_INTERVAL: ${{ inputs.retry_interval }}

jobs:
  check-changes:
    name: 差分チェック
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
      changed_dirs: ${{ steps.filter.outputs.changed_dirs }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: main取得
        run: git fetch origin main

      - name: 差分判定と対象ディレクトリ抽出
        id: filter
        run: |
          set -e
          DIFF_PATTERN="${{ inputs.diff_pattern }}"
          if [[ "${{ inputs.check_diff }}" == "false" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed_dirs=" >> $GITHUB_OUTPUT
            echo "[INFO] 差分チェック無効化のため常にビルド"
          elif [[ -z "$DIFF_PATTERN" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed_dirs=" >> $GITHUB_OUTPUT
            echo "[INFO] diff_pattern未指定のため常にビルド"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed_dirs=" >> $GITHUB_OUTPUT
            echo "[INFO] mainブランチpushのため常にビルド"
          else
            changed_files=$(git diff --name-only origin/main...HEAD | grep "$DIFF_PATTERN" || true)
            if [[ -n "$changed_files" ]]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              changed_dirs=$(echo "$changed_files" | xargs -n1 dirname | sort | uniq)
              changed_dirs_json=$(printf '%s\n' $changed_dirs | jq -Rn '[inputs]')
              echo "changed_dirs=$changed_dirs_json" >> $GITHUB_OUTPUT
              echo "[INFO] 差分ディレクトリ: $changed_dirs"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "changed_dirs=[]" >> $GITHUB_OUTPUT
              echo "[INFO] ${DIFF_PATTERN}配下に差分なし"
            fi
          fi

  detect-devcontainers:
    name: devcontainerディレクトリ検出
    needs: check-changes
    if: needs.check-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4

      - name: 差分devcontainerディレクトリ検出
        id: set-matrix
        shell: bash
        run: |
          set -e
          SEARCH_PATTERN="${{ inputs.search_pattern }}"
          changed_dirs=$(echo '${{ needs.check-changes.outputs.changed_dirs }}' | jq -r '.[]')
          found=""
          for dir in $changed_dirs; do
            for p in $SEARCH_PATTERN; do
              if [ -f "$dir/$p" ]; then
                found="$found
$dir"
              fi
            done
          done
          found=$(echo "$found" | sort | uniq | grep -v '^$' || true)
          if [ -z "$found" ]; then
            echo "[WARNING] 差分devcontainerディレクトリ未検出"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "[INFO] 差分devcontainerディレクトリ検出完了: $found"
            matrix=$(printf '%s\n' $found | jq -Rn '
              [inputs | 
                {
                  dir: .,
                  name: (.|split("/")|.[-1]),
                  parent: (
                    if . == "." or . == "" then "" 
                    else
                      (if (.|split("/")|.[-1]) == ".devcontainer" then
                        (.|split("/")[0:-2]|last // "")
                      else
                        (.|split("/")[0:-1]|last // "")
                      end)
                    end
                  )
                }
              ]' | tr -d '\n')
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: devcontainerイメージビルド・プッシュ
    needs: detect-devcontainers
    if: needs.detect-devcontainers.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.detect-devcontainers.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    outputs:
      result: ${{ steps.set-result.outputs.result }}
      image_url: ${{ steps.set-result.outputs.image_url }}
      error_message: ${{ steps.set-result.outputs.error_message }}
    steps:
      - name: コードチェックアウト
        uses: actions/checkout@v4

      - name: QEMUセットアップ
        uses: docker/setup-qemu-action@v3

      - name: Buildxセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Dockerログイン
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: タグ用値生成
        id: tagvars
        run: |
          set -e
          DATE=$(date +%Y%m%d)
          DATETIME=$(date +%Y%m%d-%H%M%S)
          GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          GIT_SHA=$(git rev-parse HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH="${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD)}"
          REPO="${GITHUB_REPOSITORY#*/}"
          OWNER="${GITHUB_REPOSITORY%/*}"
          NAME="${{ matrix.name }}"
          PARENT="${{ matrix.parent }}"
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "datetime=$DATETIME" >> $GITHUB_OUTPUT
          echo "gitTag=$GIT_TAG" >> $GITHUB_OUTPUT
          echo "gitSha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "shortSha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "parent=$PARENT" >> $GITHUB_OUTPUT

      - name: タグ置換・分岐
        id: meta
        run: |
          set -e
          TAGS="${{ inputs.imageTag }}"

          # 固定値のプレースホルダー置換
          TAGS="${TAGS//\{date\}/${{ steps.tagvars.outputs.date }}}"
          TAGS="${TAGS//\{datetime\}/${{ steps.tagvars.outputs.datetime }}}"
          TAGS="${TAGS//\{gitSha\}/${{ steps.tagvars.outputs.gitSha }}}"
          TAGS="${TAGS//\{shortSha\}/${{ steps.tagvars.outputs.shortSha }}}"
          TAGS="${TAGS//\{branch\}/${{ steps.tagvars.outputs.branch }}}"
          TAGS="${TAGS//\{repo\}/${{ steps.tagvars.outputs.repo }}}"
          TAGS="${TAGS//\{owner\}/${{ steps.tagvars.outputs.owner }}}"
          TAGS="${TAGS//\{name\}/${{ steps.tagvars.outputs.name }}}"

          # 空文字になりうるプレースホルダーの共通処理
          for PLACEHOLDER in "parent" "gitTag"; do
            VALUE="${{ steps.tagvars.outputs.${PLACEHOLDER} }}"
            if [ -z "$VALUE" ]; then
              TAGS=$(echo "$TAGS" | perl -pe "s/(^|[-_])\{$PLACEHOLDER\}([-_]|$)/\1\2/g")
              TAGS=$(echo "$TAGS" | sed 's/--*/-/g; s/__*/_/g')
              TAGS=$(echo "$TAGS" | sed 's/^[-_]*//; s/[-_]*$//')
            else
              TAGS="${TAGS//\{$PLACEHOLDER\}/$VALUE}"
            fi
          done

          # 万が一残ったプレースホルダーも消す
          TAGS=$(echo "$TAGS" | sed 's/{[^}]*}//g')

          # 空要素や重複カンマを除去
          TAGS=$(echo "$TAGS" | sed 's/,,*/,/g' | sed 's/^,//;s/,$//')

          # すべて空になった場合はデフォルト値を再設定し再度処理
          if [ -z "$TAGS" ]; then
            if [ "${{ github.ref_name }}" = "main" ]; then
              TAGS="devcontainer-{parent}-latest"
            else
              TAGS="devcontainer-{parent}-pre"
            fi
            for PLACEHOLDER in "parent"; do
              VALUE="${{ steps.tagvars.outputs.${PLACEHOLDER} }}"
              if [ -z "$VALUE" ]; then
                TAGS=$(echo "$TAGS" | perl -pe "s/(^|[-_])\{$PLACEHOLDER\}([-_]|$)/\1\2/g")
                TAGS=$(echo "$TAGS" | sed 's/--*/-/g; s/__*/_/g')
                TAGS=$(echo "$TAGS" | sed 's/^[-_]*//; s/[-_]*$//')
              else
                TAGS="${TAGS//\{$PLACEHOLDER\}/$VALUE}"
              fi
            done
          fi

          MAIN_TAG=$(echo "$TAGS" | cut -d, -f1)
          echo "repo=${{ inputs.imageName }}" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "main_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
          echo "name=${{ matrix.name }}" >> $GITHUB_OUTPUT
          echo "dir=${{ matrix.dir }}" >> $GITHUB_OUTPUT

      - name: devcontainers/ciによるビルド・プッシュ・テスト
        id: devci
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ steps.meta.outputs.repo }}
          imageTag: ${{ steps.meta.outputs.tags }}
          subFolder: ${{ matrix.dir }}
          configFile: ${{ inputs.configFile }}
          runCmd: ${{ inputs.runCmd }}
          env: ${{ inputs.env }}
          push: ${{ inputs.push }}
          platform: ${{ inputs.platform }}
          cacheFrom: ${{ inputs.cacheFrom }}
          noCache: ${{ inputs.noCache }}
        continue-on-error: true

      - name: ジョブURL取得
        id: joburl
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          JOB_URL="$RUN_URL"
          JOBS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs")
          JOB_ID=$(echo "$JOBS_JSON" | grep -B 10 "\"name\":\"${GITHUB_JOB}\"" | grep '"id":' | head -n1 | awk '{print $2}' | tr -d ',')
          if [ -n "$JOB_ID" ]; then
            JOB_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/job/$JOB_ID"
          fi
          echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
          echo "job_url=$JOB_URL" >> $GITHUB_OUTPUT

      - name: 結果出力
        id: set-result
        uses: ./.github/actions/result-output
        with:
          outcome: ${{ steps.devci.outcome }}
          run_url: ${{ steps.joburl.outputs.run_url }}
          job_url: ${{ steps.joburl.outputs.job_url }}
          success_outputs: |
            image_url=${{ steps.meta.outputs.repo }}:${{ steps.meta.outputs.main_tag }}
          failure_outputs: |
            image_url=

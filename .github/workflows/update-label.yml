name: IssueとPRのラベル自動更新

# 複数のイベントをトリガーとして設定
on:
  push:
  issues:
    types: [assigned, unassigned, closed, labeled, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, closed]
  pull_request_review:
    types: [submitted]

# IssueとPRのラベルを更新する権限を付与
permissions:
  issues: write
  pull-requests: write

jobs:
  label-issues-and-prs:
    runs-on: ubuntu-latest
    steps:
      - name: GitHub ScriptでIssueとPRのラベルを更新
        uses: actions/github-script@v7
        with:
          script: |
            const { action, issue, pull_request, pull_request_review, ref, commits } = context.payload;
            const repo = context.repo;

            // ラベル名を定数で定義し、堅牢性向上
            const LABEL_TODO = '20.status/todo';
            const LABEL_IN_PROGRESS = '21.status/in-progress';
            const LABEL_REVIEW = '23.status/review';
            const LABEL_DONE = '24.status/done';
            const LABEL_CLOSED = '25.status/closed';

            let targetIssues = new Set();
            let targetPrs = new Set();
            let labelToAdd = null;
            let removeTodoLabel = false;
            let prClosedUnmerged = false;
            let isDefaultBranchPush = false;
            
            // ラベル削除
            const removeStatusLabels = async (number) => {
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: number,
              });

              const labelsToRemove = currentLabels
                .filter(label => label.name.startsWith('2'))
                .map(label => label.name);

              for (const label of labelsToRemove) {
                console.log(`- ラベル削除: #${number} ${label}`);
                try {
                  await github.rest.issues.removeLabel({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: number,
                    name: label,
                  });
                } catch (error) {
                  console.error(`ラベル削除失敗: '${label}' #${number} `, error.message);
                }
              }
            };
            
            // ラベル追加
            const addStatusLabel = async (number, label) => {
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: number,
              });

              if (!currentLabels.some(l => l.name === label)) {
                console.log(`- ラベル追加: #${number} ${label}`);
                try {
                  await github.rest.issues.addLabels({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: number,
                    labels: [label],
                  });
                } catch (error) {
                  console.error(`ラベル追加失敗: '${label}' #${number} `, error.message);
                }
              } else {
                console.log(`ラベル既に存在: '${label}' #${number}`);
              }
            };

            // Issue番号抽出
            const findIssueNumbers = (text) => {
              const numbers = new Set();
              const regex = /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s#(\d+)/gi;
              let match;
              while ((match = regex.exec(text)) !== null) {
                numbers.add(parseInt(match[1], 10));
              }
              return numbers;
            };

            // --- イベントに応じたラベルとIssue/PR番号の特定 ---

            // PRレビューイベント
            if (pull_request_review) {
              const prNumber = pull_request_review.pull_request.number;
              const reviewState = pull_request_review.review.state;
              
              if (reviewState === 'changes_requested') {
                labelToAdd = LABEL_IN_PROGRESS;
              } else if (reviewState === 'approved') {
                labelToAdd = LABEL_REVIEW;
              } else {
                return; // コメントのみの場合、処理終了
              }

              console.log(`PR #${prNumber} レビュー更新`);
              
              // PRラベル更新
              await removeStatusLabels(prNumber);
              await addStatusLabel(prNumber, labelToAdd);

              // PRに紐づくIssue番号を本文とコミットから抽出
              const prBodyIssues = findIssueNumbers(pull_request_review.pull_request.body);
              const { data: prCommits } = await github.rest.pulls.listCommits({
                owner: repo.owner,
                repo: repo.repo,
                pull_number: prNumber,
              });
              const commitIssues = new Set();
              for (const commit of prCommits) {
                findIssueNumbers(commit.commit.message).forEach(issue => commitIssues.add(issue));
              }

              // Issueラベル更新
              const allIssues = new Set([...prBodyIssues, ...commitIssues]);
              for (const issueNumber of allIssues) {
                await removeStatusLabels(issueNumber);
                await addStatusLabel(issueNumber, labelToAdd);
              }

              return;
            }

            // Issue再開
            if (issue && action === 'reopened') {
              console.log(`Issue #${issue.number} 再開、ステータスラベルリセット`);
              await removeStatusLabels(issue.number);
              if (issue.assignees && issue.assignees.length > 0) {
                await addStatusLabel(issue.number, LABEL_TODO);
              }
              return;
            }

            // ラベル付与によるIssueクローズ
            if (issue && action === 'labeled') {
              const labeledName = context.payload.label.name;
              if (labeledName === LABEL_DONE || labeledName === LABEL_CLOSED) {
                console.log(`'${labeledName}'ラベル付与、Issue #${issue.number} をクローズ`);
                await github.rest.issues.update({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                return;
              }
            }

            // アサイン解除
            if (issue && action === 'unassigned') {
              console.log(`Issue #${issue.number} アサイン解除、'${LABEL_TODO}'ラベル削除`);
              removeTodoLabel = true;
              targetIssues.add(issue.number);
            }

            // Issueクローズ
            if (issue && action === 'closed') {
              if (!issue.labels.some(label => label.name === LABEL_DONE)) {
                targetIssues.add(issue.number);
                labelToAdd = LABEL_CLOSED;
              }
            }

            // Issueアサイン
            else if (issue && action === 'assigned') {
              if (!issue.labels.some(label => label.name.startsWith('2'))) {
                targetIssues.add(issue.number);
                labelToAdd = LABEL_TODO;
              }
            }

            // Pushイベント
            else if (ref && commits) {
              const defaultBranch = context.payload.repository.default_branch;
              if (ref === `refs/heads/${defaultBranch}`) {
                  isDefaultBranchPush = true;
              }

              for (const commit of commits) {
                findIssueNumbers(commit.message).forEach(issue => targetIssues.add(issue));
              }

              if (targetIssues.size > 0) {
                // デフォルトブランチへのプッシュは完了
                labelToAdd = isDefaultBranchPush ? LABEL_DONE : LABEL_IN_PROGRESS;
              }
            }
            
            // PR関連イベント
            else if (pull_request) {
              // PRの本文とコミットメッセージからIssue番号を抽出
              findIssueNumbers(pull_request.body).forEach(issue => targetIssues.add(issue));
              const { data: prCommits } = await github.rest.pulls.listCommits({
                owner: repo.owner,
                repo: repo.repo,
                pull_number: pull_request.number,
              });
              for (const commit of prCommits) {
                findIssueNumbers(commit.commit.message).forEach(issue => targetIssues.add(issue));
              }
              targetPrs.add(pull_request.number);

              if (pull_request.state === 'closed') {
                if (pull_request.merged) {
                  labelToAdd = LABEL_DONE;
                } else {
                  prClosedUnmerged = true;
                  labelToAdd = LABEL_CLOSED; // PRにはclosedラベルを付与
                }
              } else if (pull_request.draft) {
                labelToAdd = LABEL_IN_PROGRESS;
              } else { // 'ready_for_review' や 'opened'
                labelToAdd = LABEL_REVIEW;
              }
            }
            
            // 対象なしの場合、処理終了
            if (labelToAdd === null && !removeTodoLabel || (targetIssues.size === 0 && targetPrs.size === 0)) {
              return;
            }

            console.log(`検出Issue番号: ${[...targetIssues].join(', ') || 'なし'}`);
            console.log(`検出PR番号: ${[...targetPrs].join(', ') || 'なし'}`);
            if (labelToAdd) console.log(`追加ラベル: ${labelToAdd}`);
            if (removeTodoLabel) console.log(`削除ラベル: ${LABEL_TODO}`);

            // --- PRラベル更新 ---
            for (const prNumber of targetPrs) {
              console.log(`PR #${prNumber} ラベル更新`);
              await removeStatusLabels(prNumber);
              await addStatusLabel(prNumber, labelToAdd);
            }

            // --- Issueラベル更新 ---
            for (const issueNumber of targetIssues) {
              console.log(`Issue #${issueNumber} ラベル更新`);
              await removeStatusLabels(issueNumber);
              
              // PRクローズ時、Issueは'in-progress'に戻す
              if (prClosedUnmerged) {
                await addStatusLabel(issueNumber, LABEL_IN_PROGRESS);
              } else if (labelToAdd) {
                await addStatusLabel(issueNumber, labelToAdd);
              }

              if (removeTodoLabel) {
                const todoLabel = LABEL_TODO;
                console.log(`- ラベル削除: ${todoLabel}`);
                try {
                  await github.rest.issues.removeLabel({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: issueNumber,
                    name: todoLabel,
                  });
                } catch (error) {
                  console.error(`ラベル削除失敗: '${todoLabel}'`, error.message);
                }
              }
            }
